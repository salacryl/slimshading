<script src="js/three.js"></script>
<div id="container"></div>

		<script id="vertexShader" type="x-shader/x-vertex">

			varying vec2 vUv;

			void main()	{

				vUv = uv;

				gl_Position = vec4( position, 1.0 );

			}

		</script>

		<script id="fragmentShader" type="x-shader/x-fragment">

			varying vec2 vUv;
			uniform vec2 resolution;
			void main()	{
				vec2 st = gl_FragCoord.xy/resolution;
				if (st.y >0.65) st.y =0.0;
				else st.y =st.y+0.25;
				gl_FragColor = vec4(0.341*st.y,1.0*st.y,0.980*st.y,1.0);
				
			}

		</script>

		<script type="module">


			var container;

			var camera, scene, renderer;

			var uniforms;

			init();
			

			function init() {

				container = document.getElementById( 'container' );

				camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

				scene = new THREE.Scene();

				var geometry = new THREE.PlaneBufferGeometry( 2, 2 );

				uniforms = {
					resolution: { value: new THREE.Vector2( ) }
				};

				var material = new THREE.ShaderMaterial( {

					uniforms: uniforms,
					vertexShader: document.getElementById( 'vertexShader' ).textContent,
					fragmentShader: document.getElementById( 'fragmentShader' ).textContent

				} );

				var mesh = new THREE.Mesh( geometry, material );
				scene.add( mesh );

				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				//renderer.setClearColor(new THREE.Color("rgb(255, 0, 0)"));
				//renderer.setSize(window.innerWidth, window.innerHeight-183);
				container.appendChild( renderer.domElement );
				console.log(container);

				onWindowResize();

				window.addEventListener( 'resize', onWindowResize, false );
                renderer.render( scene, camera );
			}

			function onWindowResize() {
				uniforms["resolution"].value.x = window.innerWidth;
      			uniforms["resolution"].value.y = window.innerHeight;
				renderer.setSize( window.innerWidth, window.innerHeight-110);

			}

			//

			

		</script>
